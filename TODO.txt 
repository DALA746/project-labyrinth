STYLING COLORS: 
https://colorsui.com/popular-color-palettes/

## **ðŸ”µ Blue Level (Minimum Requirements)**

- Your page should be responsive.
- Use redux to store the current state of the game
- Focus on making the UX of your app good. Handle the response delay
- Use thunks to wrap your API calls (but you don't *have to* if you don't want to).

## **ðŸ”´ Red Level (Intermediary Goals)**

- Show the descriptions of the directions in the main description of the current room.  
Present clear and simple actions.  For example, your button would say *"Go East"*.  
Instead of *"East -A worn sign 'The Temple of *ech*igo'. Some of the letters are missing. 
An overgrown paved path leads to the East"*
- Use redux to store a history of what the player has done
- If you want to focus more on design and make or use a design library 
(for example [material-ui](https://material-ui.com/))


## **Hints and tips to complete the projectÂ ðŸ¤“**

1. Try starting the game with Postman
2. Get the game started in your code using fetch
3. Display the description and actions from the response
4. Allow the user/player to select an action
5. Perform a POST request based on the action selected
6. Handle the response from the `POST /action` to update the game state

Don't be afraid of storing lots of information in redux - you can store the username, the current game state, and even a history of past actions that the player has made.

### Description and Actions UI

How you present the description and the actions is completely up to you.  Maybe you want to sort the directions (East, North, West, South) or put them in some graphical order.  Perhaps you would like to add interactable compass.

### Request response time

This project's backend is designed so that there is some delay until the request returns from the server.  Using thunks is a good way of making sure that the user doesn't do another action until the response is received from the server.

If you notice that your request takes some time, this is intentional, think about a way of making this waiting time okay for your users. Add a loading state of some sort.
                                                 